import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { useChallenges } from '../context/ChallengeContext';
import { toast } from "@/components/ui/use-toast";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const CreateChallengePage: React.FC = () => {
  const { profile, session } = useAuth();
  const { createChallenge } = useChallenges();
  const navigate = useNavigate();
  
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    requirements: '',
    evaluation: '',
    deadline: '',
    difficulty: 'Intermediate',
    category: 'NLP',
    prize: '$5,000',
    logo: 'https://placehold.co/50'
  });
  
  const [creating, setCreating] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Handle form input changes
  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!profile || profile.role !== 'sponsor') {
      setError('You must be logged in as a sponsor to create a challenge');
      return;
    }
    
    // Validate form
    if (!formData.title || !formData.description || !formData.requirements || !formData.deadline) {
      setError('All fields are required');
      return;
    }
    
    // Validate deadline is in the future
    const deadlineDate = new Date(formData.deadline);
    const now = new Date();
    if (deadlineDate <= now) {
      setError('Deadline must be in the future');
      return;
    }
    
    setCreating(true);
    setError(null);
    
    try {
      // Parse requirements and evaluation into arrays
      const requirementsArray = formData.requirements
        .split('\n')
        .filter(item => item.trim() !== '')
        .map(item => item.trim());
      
      const evaluationArray = formData.evaluation
        .split('\n')
        .filter(item => item.trim() !== '')
        .map(item => item.trim());
      
      // Create challenge using context
      await createChallenge({
        id: '',  // Will be generated by createChallenge
        title: formData.title,
        description: formData.description,
        sponsor: profile.company_name || profile.full_name,
        deadline: formData.deadline,
        status: 'active',
        difficulty: formData.difficulty,
        logo: formData.logo,
        prize: formData.prize,
        category: formData.category,
        requirements: requirementsArray,
        evaluation: evaluationArray,
        resources: [],
        createdBy: profile.id,
        name: '', // These fields are required by the Challenge type
        link: '',
        sponsor_id: profile.id
      });
      
      // Show success toast
      toast({
        title: "Challenge created successfully!",
        description: "Your challenge is now live and available for builders to accept.",
        variant: "default"
      });
      
      // Redirect to sponsor dashboard
      navigate('/dashboard/sponsor');
      
    } catch (error: any) {
      console.error('Error creating challenge:', error);
      setError(error.message || 'Failed to create challenge. Please try again.');
    } finally {
      setCreating(false);
    }
  };
  
  // Get minimum date for deadline (tomorrow)
  const getMinDate = () => {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    return tomorrow.toISOString().split('T')[0];
  };
  
  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-3xl mx-auto">
        <div className="mb-6 flex justify-between items-center">
          <h1 className="text-2xl font-bold text-gray-900">Create New Challenge</h1>
          <Link
            to="/dashboard/sponsor"
            className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
          >
            Back to Dashboard
          </Link>
        </div>
        
        <div className="bg-white shadow-md rounded-lg p-6">
          {error && (
            <div className="mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
              {error}
            </div>
          )}
          
          <form onSubmit={handleSubmit}>
            <div className="mb-6">
              <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">
                Challenge Title <span className="text-red-600">*</span>
              </label>
              <input
                id="title"
                name="title"
                type="text"
                value={formData.title}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="E.g., AI-Powered Image Recognition System"
                required
              />
            </div>
            
            <div className="mb-6">
              <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
                Description <span className="text-red-600">*</span>
              </label>
              <textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                rows={5}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Provide a detailed description of the challenge, its context, and goals..."
                required
              ></textarea>
              <p className="mt-1 text-sm text-gray-500">
                Clearly explain what the challenge is about and what problem it aims to solve.
              </p>
            </div>
            
            <div className="mb-6">
              <label htmlFor="requirements" className="block text-sm font-medium text-gray-700 mb-1">
                Requirements <span className="text-red-600">*</span>
              </label>
              <textarea
                id="requirements"
                name="requirements"
                value={formData.requirements}
                onChange={handleInputChange}
                rows={5}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="List specific requirements, technologies, or constraints..."
                required
              ></textarea>
              <p className="mt-1 text-sm text-gray-500">
                Enter each requirement on a new line. These will be displayed as bullet points.
              </p>
            </div>
            
            <div className="mb-6">
              <label htmlFor="evaluation" className="block text-sm font-medium text-gray-700 mb-1">
                Evaluation Criteria <span className="text-red-600">*</span>
              </label>
              <textarea
                id="evaluation"
                name="evaluation"
                value={formData.evaluation}
                onChange={handleInputChange}
                rows={5}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="E.g., Accuracy (40%), Performance (30%), Code quality (20%), Documentation (10%)"
                required
              ></textarea>
              <p className="mt-1 text-sm text-gray-500">
                Enter each criterion on a new line. Include percentage weights if applicable.
              </p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div>
                <label htmlFor="deadline" className="block text-sm font-medium text-gray-700 mb-1">
                  Submission Deadline <span className="text-red-600">*</span>
                </label>
                <input
                  id="deadline"
                  name="deadline"
                  type="datetime-local"
                  value={formData.deadline}
                  onChange={handleInputChange}
                  min={getMinDate()}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
                <p className="mt-1 text-sm text-gray-500">
                  Set a reasonable deadline for builders to submit their solutions.
                </p>
              </div>
              
              <div>
                <label htmlFor="prize" className="block text-sm font-medium text-gray-700 mb-1">
                  Prize Amount <span className="text-red-600">*</span>
                </label>
                <input
                  id="prize"
                  name="prize"
                  type="text"
                  value={formData.prize}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="E.g., $5,000"
                  required
                />
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div>
                <label htmlFor="difficulty" className="block text-sm font-medium text-gray-700 mb-1">
                  Difficulty Level <span className="text-red-600">*</span>
                </label>
                <Select 
                  name="difficulty" 
                  value={formData.difficulty} 
                  onValueChange={(value) => setFormData(prev => ({ ...prev, difficulty: value }))}
                >
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="Select difficulty" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Beginner">Beginner</SelectItem>
                    <SelectItem value="Intermediate">Intermediate</SelectItem>
                    <SelectItem value="Advanced">Advanced</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">
                  Category <span className="text-red-600">*</span>
                </label>
                <Select 
                  name="category" 
                  value={formData.category} 
                  onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}
                >
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="Select category" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="NLP">NLP</SelectItem>
                    <SelectItem value="Computer Vision">Computer Vision</SelectItem>
                    <SelectItem value="Data Analysis">Data Analysis</SelectItem>
                    <SelectItem value="Reinforcement Learning">Reinforcement Learning</SelectItem>
                    <SelectItem value="Other">Other</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div className="flex justify-end space-x-3">
              <Button variant="outline" asChild>
                <Link to="/dashboard/sponsor">Cancel</Link>
              </Button>
              <Button
                type="submit"
                disabled={creating}
              >
                {creating ? 'Creating...' : 'Create Challenge'}
              </Button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default CreateChallengePage;
